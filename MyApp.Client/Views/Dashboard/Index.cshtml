@using MyApp.Client.Helpers;

@{

    ViewBag.Title = "Dashboard";
}
<h2>@ViewBag.Title</h2>

<div class="row">
    <div class="col-sm-6">
        <div class="command-bar btn-group">
            <a href="#" class="btn btn-default" data-action="" data-key="refresh">Refresh</a>
            <a href="#" class="btn btn-default" data-action="@Url.Action("Stop", "Dashboard")" data-key="stop">Stop</a>
            <a href="#" class="btn btn-default" data-action="@Url.Action("Reset", "Dashboard")" data-key="reset">Reset</a>
            <a href="#" class="btn btn-default" data-action="@Url.Action("Delete", "Dashboard")" data-key="delete">Delete</a>
        </div>
    </div>

    @if (Html.IsDebug() || HttpContext.Current.IsDebuggingEnabled)
    {
        <div class="col-sm-6">
            <div class="command-bar btn-group pull-right">
                <a href="#" class="btn btn-default" data-action="@Url.Action("Start", "Dashboard")" data-key="run">Start</a>
                <a href="#" class="btn btn-default" data-action="@Url.Action("CleanUp", "Dashboard")" data-key="cleanup">Clean Up</a>
            </div>
        </div>
    }
</div>

<div class="row" style="margin-top: 15px;">
    <div class="col-sm-12">
        <div id="grid"></div>
    </div>
</div>

@section scripts {
<script type="text/javascript">
var readDataUrl = '@Url.Action("ReadData", "Dashboard")';
var methodUrl = '@Url.Action("Index", "Method")';
var rtProgressUrl = '@Url.Action("Index", "RTProgress")';

$(document).ready(function () {
    initializeGrid();
    initCommands();
});

function initializeGrid() {
    var dateField = function (config) {
        jsGrid.Field.call(this, config);
    };
    dateField.prototype = new jsGrid.Field({
        align: "center",
        sorter: function (date1, date2) {
            return new Date(date1) - new Date(date2);
        },
        itemTemplate: function (value) {
            if (value) {
                var date = new Date(value);
                return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
            } else {
                return;
            }
        },
    });
    jsGrid.fields.date = dateField;

    var longText = function (config) {
        jsGrid.Field.call(this, config);
    };
    longText.prototype = new jsGrid.Field({
        itemTemplate: function (value, item) {
            if (value)
                return '<div style="overflow-y: auto; max-height: 60px; word-break:break-all;">' + value + '</div>';
            else
                return;
        }
    });
    jsGrid.fields.longtext = longText;

    $("#grid").jsGrid({
        width: "100%",
        height: "auto",

        inserting: false,
        editing: false,
        sorting: false,

        paging: true,
        pageIndex: 1,
        pageSize: 20,
        pageLoading: true,
        pagerFormat: "{prev} {pages} {next}      {pageIndex} of {pageCount}",

        loadIndication: true,
        loadIndicationDelay: 500,
        loadMessage: "Please, wait...",
        loadShading: true,

        fields: [
            {
                name: "chkSelect", type: "checkbox", width: "25", title: "", align: "center",
                headerTemplate: function (value, item) {
                    return '<input type="checkbox" class="all-sel" />';
                },
                itemTemplate: function (value, item) {
                    return '<input type="checkbox" value="' + item.JobID + '" class="row-sel" />';
                }
            },
            {
                name: "JobID", type: "number", width: "60", title: "JID",
                itemTemplate: function (value, item) {
                    return '<a href="' + rtProgressUrl + '?jobID=' + value + '" target="_blank">' + value + '</a>';
                }
            },
            { name: "AppID", type: "text", width: "60" },
            { name: "UserID", type: "number", width: "40", title: "UID" },
            { name: "ProcessID", type: "number", width: "40", title: "PID" },
            { name: "JobType", type: "text", width: "80", title: "Type" },
            {
                name: "JobName", type: "text", width: "100", title: "Name",
                itemTemplate: function (value, item) {
                    return '<a href="' + methodUrl + '?jobID=' + item.JobID + '" target="_blank">' + value + '</a>';
                }
            },
            { name: "InvokeMeta", type: "text", visible: false },
            { name: "Parameters", type: "text", visible: false },
            { name: "Status", type: "number", visible: false},
            { name: "StatusLabel", type: "text", width: "80", title: "Status" },
            { name: "Percent", type: "text", width: "50", title: "%" },
            { name: "Note", type: "longtext", width: "160" },
            { name: "Data", type: "longtext", width: "140" },
            { name: "Error", type: "longtext", width: "140" },
            { name: "Start", type: "date", width: "80" },
            { name: "End", type: "date", width: "80" },
            { name: "Created", type: "date", width: "80" },
        ],

        autoload: true,
        controller: {
            loadData: function (filter) {
                var d = $.Deferred();
                $.ajax({
                    type: "GET",
                    url: readDataUrl,
                    data: filter,
                }).done(function (response) {
                    d.resolve(response);
                    return;
                });
                return d.promise();
            }
        }
    });
}

function initCommands() {
    $('#grid').on('click', 'input.all-sel', function () {
        var that = $(this);
        var checkboxes = that.closest('.jsgrid').find('input.row-sel')
        checkboxes.prop("checked", that.prop("checked"));
    });

    $('.command-bar a[data-key]').click(function () {
        var $this = $(this);
        var key = $this.attr('data-key');
        var action = $this.attr('data-action');
        var grid = $('#grid');
        var ids;
        switch (key) {
            case 'refresh':
                grid.jsGrid('render');
                break;
            case 'reset':
            case 'delete':
            case 'stop':
            case 'run':
                ids = getSelectedRecords('#grid');
                if (confirm('Are you sure you want to ' + key.toUpperCase() + ' jobs?')) {
                    $.post(action, { "ids": ids }, function (result) {
                        grid.jsGrid('render');
                    });
                }
                break;
            case 'cleanup':
                if (confirm('Are you sure you want to ' + key.toUpperCase() + ' jobs?')) {
                    $.post(action, null, function (result) {
                        grid.jsGrid('render');
                    });
                }
                break;
        }
        return false;
    });

    function getSelectedRecords(divSel) {
        var selected = $(divSel + ' input.row-sel:checked');
        var ids = [];
        selected.each(function () {
            ids.push($(this).val());
        });

        return ids;
    }
}

</script>
}